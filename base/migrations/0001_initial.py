# Generated by Django 5.2.3 on 2025-06-15 02:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='JackpotPool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lottery_type', models.CharField(choices=[('hourly', 'Hourly PowerBall'), ('daily', 'Mega Daily PowerBall')], max_length=10, unique=True)),
                ('current_amount_sol', models.DecimalField(decimal_places=9, default=Decimal('0'), max_digits=15)),
                ('current_amount_usd', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=12)),
                ('total_contributions', models.DecimalField(decimal_places=9, default=Decimal('0'), help_text='Total des contributions historiques', max_digits=15)),
                ('total_payouts', models.DecimalField(decimal_places=9, default=Decimal('0'), help_text='Total des gains distribués', max_digits=15)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pool de Jackpot',
                'verbose_name_plural': 'Pools de Jackpot',
            },
        ),
        migrations.CreateModel(
            name='SystemConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=50, unique=True)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Configuration Système',
                'verbose_name_plural': 'Configurations Système',
            },
        ),
        migrations.CreateModel(
            name='Lottery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('lottery_type', models.CharField(choices=[('hourly', 'Hourly PowerBall'), ('daily', 'Mega Daily PowerBall')], db_index=True, max_length=10)),
                ('scheduled_time', models.DateTimeField(db_index=True)),
                ('executed_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('processing', 'En cours'), ('completed', 'Terminé'), ('failed', 'Échoué')], db_index=True, default='pending', max_length=15)),
                ('jackpot_amount_sol', models.DecimalField(decimal_places=9, default=Decimal('0'), help_text='Montant du jackpot en SOL', max_digits=15)),
                ('jackpot_amount_usd', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Valeur estimée en USD', max_digits=12)),
                ('total_participants', models.IntegerField(default=0)),
                ('total_tickets', models.IntegerField(default=0)),
                ('transaction_signature', models.CharField(blank=True, help_text='Signature de la transaction Solana', max_length=88, null=True)),
                ('slot_number', models.BigIntegerField(blank=True, help_text='Numéro de slot Solana', null=True)),
                ('vrf_request_id', models.CharField(blank=True, max_length=100, null=True)),
                ('random_seed', models.CharField(blank=True, max_length=64, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tirage',
                'verbose_name_plural': 'Tirages',
                'ordering': ['-scheduled_time'],
                'indexes': [models.Index(fields=['lottery_type', 'status'], name='base_lotter_lottery_d43023_idx'), models.Index(fields=['scheduled_time', 'status'], name='base_lotter_schedul_c62272_idx')],
            },
        ),
        migrations.CreateModel(
            name='TokenHolding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wallet_address', models.CharField(db_index=True, max_length=44)),
                ('balance', models.DecimalField(decimal_places=8, max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('tickets_count', models.IntegerField(default=0, help_text='Nombre de tickets (balance / 10000)')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('is_eligible', models.BooleanField(default=False, help_text='Éligible pour le prochain tirage')),
            ],
            options={
                'verbose_name': 'Détention de Token',
                'verbose_name_plural': 'Détentions de Tokens',
                'indexes': [models.Index(fields=['wallet_address', 'is_eligible'], name='base_tokenh_wallet__36975c_idx'), models.Index(fields=['tickets_count'], name='base_tokenh_tickets_660779_idx')],
                'unique_together': {('wallet_address',)},
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_type', models.CharField(choices=[('buy', 'Achat $BALL'), ('sell', 'Vente $BALL'), ('transfer', 'Transfert'), ('payout', 'Paiement de gain')], max_length=10)),
                ('wallet_address', models.CharField(db_index=True, max_length=44)),
                ('ball_amount', models.DecimalField(decimal_places=8, default=Decimal('0'), max_digits=20)),
                ('sol_amount', models.DecimalField(decimal_places=9, default=Decimal('0'), max_digits=15)),
                ('usd_amount', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=12)),
                ('signature', models.CharField(max_length=88, unique=True)),
                ('slot', models.BigIntegerField()),
                ('block_time', models.DateTimeField()),
                ('hourly_jackpot_contribution', models.DecimalField(decimal_places=9, default=Decimal('0'), help_text='10% pour le jackpot horaire', max_digits=15)),
                ('daily_jackpot_contribution', models.DecimalField(decimal_places=9, default=Decimal('0'), help_text='5% pour le jackpot journalier', max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['-block_time'],
                'indexes': [models.Index(fields=['wallet_address', 'transaction_type'], name='base_transa_wallet__ea8c69_idx'), models.Index(fields=['signature'], name='base_transa_signatu_562b68_idx'), models.Index(fields=['block_time'], name='base_transa_block_t_53aa1c_idx')],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('wallet_address', models.CharField(blank=True, help_text='Adresse du portefeuille Solana', max_length=44, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active_participant', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', related_query_name='custom_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', related_query_name='custom_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('lottery_created', 'Tirage créé'), ('lottery_executed', 'Tirage exécuté'), ('winner_selected', 'Gagnant sélectionné'), ('payout_sent', 'Gain envoyé'), ('jackpot_updated', 'Jackpot mis à jour'), ('system_error', 'Erreur système')], max_length=20)),
                ('description', models.TextField()),
                ('wallet_address', models.CharField(blank=True, max_length=44, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('lottery', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.lottery')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.user')),
            ],
            options={
                'verbose_name': "Log d'Audit",
                'verbose_name_plural': "Logs d'Audit",
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['action_type', 'timestamp'], name='base_auditl_action__a6fabe_idx'), models.Index(fields=['wallet_address'], name='base_auditl_wallet__d35d19_idx')],
            },
        ),
        migrations.CreateModel(
            name='Winner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wallet_address', models.CharField(db_index=True, max_length=44)),
                ('winning_amount_sol', models.DecimalField(decimal_places=9, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('winning_amount_usd', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=12)),
                ('tickets_held', models.IntegerField(help_text='Nombre de tickets détenus au moment du tirage', validators=[django.core.validators.MinValueValidator(1)])),
                ('payout_transaction_signature', models.CharField(blank=True, max_length=88, null=True)),
                ('payout_status', models.CharField(choices=[('pending', 'En attente'), ('processing', 'En cours'), ('completed', 'Payé'), ('failed', 'Échec')], default='pending', max_length=20)),
                ('payout_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('lottery', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='winner', to='base.lottery')),
            ],
            options={
                'verbose_name': 'Gagnant',
                'verbose_name_plural': 'Gagnants',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['wallet_address'], name='base_winner_wallet__446083_idx'), models.Index(fields=['payout_status'], name='base_winner_payout__3607ef_idx')],
            },
        ),
    ]
